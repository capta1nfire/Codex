--- a/rust_generator/src/engine/generator.rs
+++ b/rust_generator/src/engine/generator.rs
@@ -1541,8 +1541,11 @@ impl QrCodeGenerator {
         match eye_shape {
             EyeShape::Square => {
                 path_parts.push(format!("M {} {} h 7 v 7 h -7 Z", x, y));
-                path_parts.push(format!("M {} {} h 3 v 3 h -3 Z", x + 2, y + 2));
+                // FIXED: En modo unificado, no crear agujero para el centro
+                // El centro se renderiza implícitamente con el mismo color que el marco
             }
             EyeShape::RoundedSquare => {
                 path_parts.push(format!(
                     "M {:.1} {} h 5.6 a 0.7 0.7 0 0 1 0.7 0.7 v 5.6 a 0.7 0.7 0 0 1 -0.7 0.7 h -5.6 a 0.7 0.7 0 0 1 -0.7 -0.7 v -5.6 a 0.7 0.7 0 0 1 0.7 -0.7 Z",
                     x as f32 + 0.7, y
                 ));
-                path_parts.push(format!("M {} {} h 3 v 3 h -3 Z", x + 2, y + 2));
+                // FIXED: En modo unificado, no crear agujero para el centro
             }
             EyeShape::Circle => {
@@ -1557,12 +1557,8 @@ impl QrCodeGenerator {
                     "M {} {} A 3.5 3.5 0 1 0 {} {} A 3.5 3.5 0 1 0 {} {} Z",
                     cx - 3.5, cy, cx + 3.5, cy, cx - 3.5, cy
                 ));
-                let cx_inner = (x + 2) as f32 + 1.5;
-                let cy_inner = (y + 2) as f32 + 1.5;
-                path_parts.push(format!(
-                    "M {} {} A 1.5 1.5 0 1 0 {} {} A 1.5 1.5 0 1 0 {} {} Z",
-                    cx_inner - 1.5, cy_inner, cx_inner + 1.5, cy_inner, cx_inner - 1.5, cy_inner
-                ));
+                // FIXED: En modo unificado, no crear agujero para el centro
+                // El ojo circular debe ser sólido, no un anillo
             }
             EyeShape::Dot => {
                 // Marco exterior cuadrado
@@ -1567,12 +1563,9 @@ impl QrCodeGenerator {
                 // Marco exterior cuadrado
                 path_parts.push(format!("M {} {} h 7 v 7 h -7 Z", x, y));
-                // Centro circular
-                let cx = (x + 2) as f32 + 1.5;
-                let cy = (y + 2) as f32 + 1.5;
-                path_parts.push(format!(
-                    "M {} {} A 1.5 1.5 0 1 0 {} {} A 1.5 1.5 0 1 0 {} {} Z",
-                    cx - 1.5, cy, cx + 1.5, cy, cx - 1.5, cy
-                ));
+                // FIXED: Para Dot, el marco es cuadrado pero sólido
+                // El efecto "dot" se logra con el contraste de colores,
+                // no creando un agujero
             }
             EyeShape::Leaf => {
@@ -1587,7 +1580,7 @@ impl QrCodeGenerator {
                     x as f32 + 1.4, y as f32 + 1.4, cx, y as f32
                 ));
-                path_parts.push(format!("M {} {} h 3 v 3 h -3 Z", x + 2, y + 2));
+                // FIXED: Leaf debe ser una forma sólida
             }
             EyeShape::Star => {
@@ -1610,26 +1610,8 @@ impl QrCodeGenerator {
                 }
                 star_path.push_str(" Z");
                 path_parts.push(star_path);
-                
-                // Centro estrella más pequeña
-                let cx_inner = (x + 2) as f32 + 1.5;
-                let cy_inner = (y + 2) as f32 + 1.5;
-                let outer_r_inner = 1.5;
-                let inner_r_inner = 0.75;
-                
-                let mut star_path_inner = String::from("M ");
-                for i in 0..10 {
-                    let angle = (i as f32 * 36.0 - 90.0).to_radians();
-                    let r = if i % 2 == 0 { outer_r_inner } else { inner_r_inner };
-                    let px = cx_inner + r * angle.cos();
-                    let py = cy_inner + r * angle.sin();
-                    
-                    if i == 0 {
-                        star_path_inner.push_str(&format!("{:.2} {:.2}", px, py));
-                    } else {
-                        star_path_inner.push_str(&format!(" L {:.2} {:.2}", px, py));
-                    }
-                }
-                star_path_inner.push_str(" Z");
-                path_parts.push(star_path_inner);
+                // FIXED: Star debe ser una estrella sólida completa
+                // El centro es parte integral de la forma
             }
             // ... Similar fixes for other shapes ...