// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Ajustamos la salida del cliente para que esté en node_modules como es estándar
  // output   = "../src/generated/prisma" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Definición de la enumeración para roles
enum Role {
  USER       // Usuario básico - funciones estándar de generación
  PREMIUM    // Usuario premium - funciones avanzadas de generación  
  ADVANCED   // Usuario avanzado - funciones expertas de generación
  WEBADMIN   // Administrador del sitio web - gestión técnica completa
  SUPERADMIN // Super administrador - gestión completa y delegación de administradores
}

// Definición del modelo de Usuario
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String      // Almacena el hash de la contraseña
  firstName String    // <--- Vuelve a ser obligatorio
  lastName  String? // Apellido (opcional)
  username  String?  @unique // Identificador único elegido por el usuario (opcional)
  phone     String?  // Número de teléfono del usuario (opcional)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime? // Opcional
  apiKeyPrefix String? // Prefijo no secreto de la API Key para búsqueda rápida
  apiKey    String?  @unique  // Almacena el hash de la API key, opcional y único
  apiUsage  Int      @default(0)
  isActive  Boolean  @default(true)
  
  // Avatar del usuario
  avatarUrl String?  // URL a la imagen del avatar (opcional)
  avatarType String? @default("initial") // Tipo de avatar: "initial", "image", "default1", "default2", etc.

  // Índices optimizados para performance
  @@index([apiKeyPrefix]) // Índice simple para búsqueda rápida por prefijo
  @@index([apiKeyPrefix, isActive]) // Índice compuesto para búsqueda de API key activa
  @@index([email, isActive]) // Índice compuesto para login (email + estado)
  @@index([role, isActive]) // Índice compuesto para consultas por rol y estado
  @@index([isActive, createdAt]) // Índice para consultas de usuarios activos ordenados por fecha
  @@index([lastLogin]) // Índice para consultas de actividad de usuarios
  @@index([username]) // Índice adicional para username (ya existe @unique pero esto optimiza búsquedas)

  // Relaciones
  studioConfigs StudioConfig[]
}

// Enumeración para tipos de configuración de Studio
enum StudioConfigType {
  PLACEHOLDER // Configuración para QR de placeholder/ejemplo
  TEMPLATE    // Configuración para plantillas específicas por dominio
  GLOBAL      // Configuración global que aplica a todos los QR
}

// Modelo para configuraciones de QR Studio
model StudioConfig {
  id            String           @id @default(uuid())
  type          StudioConfigType // Tipo de configuración
  name          String           // Nombre descriptivo
  description   String?          // Descripción opcional
  templateType  String?          // Tipo de plantilla (instagram, youtube, etc) si type = TEMPLATE
  config        Json             // Configuración QR en formato JSON
  isActive      Boolean          @default(true)
  version       Int              @default(1)
  
  // Relaciones
  createdBy     User             @relation(fields: [createdById], references: [id])
  createdById   String
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Índices
  @@unique([type, templateType]) // Solo una config activa por tipo+template
  @@index([type, isActive])      // Búsqueda rápida por tipo activo
  @@index([createdById])         // Búsqueda por creador
}
